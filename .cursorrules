# Wandering Project - AI Assistant Guidelines

## Project Overview
This is a 3D web-based game/simulation built with Three.js. The project focuses on space exploration with procedurally generated environments and physics-based interactions.

## Code Organization
- `/src`: Contains all source code
  - `/src/core`: Core engine components (rendering, physics, game loop)
  - `/src/utils`: Utility functions and helper classes
  - `/src/entities`: Game objects and entities
  - `/src/environment`: Environmental elements and scene setup
- `/public/assets`: Contains all game assets
  - `/public/assets/models`: 3D models in GLB/GLTF format

## Coding Standards

### General
- Use ES6+ JavaScript features
- Functions and variables should use camelCase
- Classes should use PascalCase
- Constants should use UPPER_SNAKE_CASE
- Indent with 4 spaces (not tabs)
- Use semicolons at the end of statements
- Maximum line length of 100 characters

### Documentation
- All classes should have a class-level JSDoc comment
- All public methods should have JSDoc comments with @param and @return tags
- Complex algorithms should have explanatory comments

### Three.js Best Practices
- Use object pooling for frequently created/destroyed objects
- Minimize draw calls by using instanced meshes where appropriate
- Dispose of geometries, materials, and textures when no longer needed
- Use LOD (Level of Detail) for complex models
- Optimize with frustum culling for off-screen objects

### Model Loading
- Always use the ModelLoader class for loading 3D models
- Paths are now handled as follows:
  - Absolute paths (starting with '/' or 'http') are used directly
  - Relative paths are prefixed with '/assets/'
- Cache models when they will be reused

### Performance Considerations
- Use requestAnimationFrame for animation loop
- Minimize DOM manipulations
- Implement proper garbage collection patterns
- Optimize render cycles with proper scene management
- Use WebWorkers for heavy calculations

### Error Handling
- Use try/catch blocks for error-prone operations
- Always handle promises with .catch() or try/await/catch
- Log errors with appropriate context information 